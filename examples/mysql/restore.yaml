apiVersion: apps.kubeblocks.io/v1alpha1
kind: Cluster
metadata:
  name: mysql-cluster-restore
  namespace: default
  annotations:
    kubeblocks.io/restore-from-backup: '{"mysql":{"connectionPassword":"<backup-connection-password>","name":"mysql-cluster-backup","namespace":"default","volumeRestorePolicy":"Parallel"}}'
spec:
  # Specifies the behavior when a Cluster is deleted.
  # - `DoNotTerminate`: Prevents deletion of the Cluster. This policy ensures that all resources remain intact.
  # - `Halt`: Deletes Cluster resources like Pods and Services but retains Persistent Volume Claims (PVCs), allowing for data preservation while stopping other operations.
  # - `Delete`: Extends the `Halt` policy by also removing PVCs, leading to a thorough cleanup while removing all persistent data.
  # - `WipeOut`: An aggressive policy that deletes all Cluster resources, including volume snapshots and backups in external storage. This results in complete data removal and should be used cautiously, primarily in non-production environments to avoid irreversible data loss.
  terminationPolicy: Delete
  # Defines a set of node affinity scheduling rules for the Cluster's Pods. This field helps control the placement of Pods on nodes within the cluster.
  affinity:
   # Specifies the anti-affinity level of Pods within a Component. It determines how pods should be spread across nodes to improve availability and performance.
    podAntiAffinity: Preferred
    # Represents the key of node labels used to define the topology domain for Pod anti-affinity and Pod spread constraints. 
    topologyKeys:
    - kubernetes.io/hostname
    # Determines the level of resource isolation between Pods. It can have the following values: `SharedNode` and `DedicatedNode`. 
    # - SharedNode: Allow that multiple Pods may share the same node, which is the default behavior of K8s. 
    # - DedicatedNode: Each Pod runs on a dedicated node, ensuring that no two Pods share the same node. 
    tenancy: SharedNode
  # An array that specifies tolerations attached to the Cluster's Pods, allowing them to be scheduled onto nodes with matching taints.
  tolerations:
    - key: kb-data
      operator: Equal
      value: 'true'
      effect: NoSchedule
  # Specifies a list of ClusterComponentSpec objects used to define the individual components that make up a Cluster. This field allows for detailed configuration of each component within the Cluster.
  # Note: `shardingSpecs` and `componentSpecs` cannot both be empty; at least one must be defined to configure a cluster.
  # ClusterComponentSpec defines the specifications for a Component in a Cluster.
  componentSpecs:
  - name: mysql
    # Specifies the ComponentDefinition custom resource (CR) that defines the
    # Component's characteristics and behavior.
    # Supports three different ways to specify the ComponentDefinition:
    # - the regular expression - recommended
    # - the full name - recommended
    # - the name prefix
    componentDef: "mysql-8.0"  # match all CMPD named with 'mysql-8.0-'
    # ServiceVersion specifies the version of the Service expected to be
    # provisioned by this Component.
    # When componentDef is "mysql-8.0",
    # Valid options are: [8.0.30,8.0.31,8.0.32,8.0.33,8.0.34,8.0.35,8.0.36,8.0.37,8.0.38,8.0.39]
    serviceVersion: 8.0.39
    serviceAccountName: kb-mysql-cluster
    replicas: 2
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: '1'
        memory: 1Gi
    volumeClaimTemplates:
    - name: data
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 30Gi
