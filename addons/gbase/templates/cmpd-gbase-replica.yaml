apiVersion: apps.kubeblocks.io/v1alpha1
kind: ComponentDefinition
metadata:
  name: {{ include "gbase.componentDefName" . }}-replica
  labels:
    {{- include "gbase.labels" . | nindent 4 }}
spec:
  provider: kubeblocks.io
  description: gabse 8c replication node
  serviceKind: gbase
  serviceVersion: 5.0.0
  services:
    - name: default
      serviceName: gbase
      spec:
        ports:
          - name: gbase
            port: {{ .Values.gbaseConfigs.service.port }}
            targetPort: gbase
      roleSelector: primary
  exporter:
    containerName: exporter
    scrapePath: /metrics
    scrapePort: http-metrics
  configs:
    - name: gbase-config
      templateRef: {{ include "gbase.cmConfigName" . }}
      namespace: {{ .Release.Namespace }}
      volumeName: gbase-config
      defaultMode: 0444
  scripts:
    - name: gbase-scripts
      templateRef: {{ include "gbase.cmScriptsName" . }}
      namespace: {{ .Release.Namespace }}
      volumeName: scripts
      defaultMode: 0555
  systemAccounts:
    - name: gbase
      initAccount: true
      passwordGenerationPolicy:
        length: 16
        numDigits: 8
        numSymbols: 1
        letterCase: MixedCases
  vars:
    - name: GBASE_USER
      valueFrom:
        credentialVarRef:
          compDef: {{ include "gbase.componentDefName" . }}
          name: gbase
          optional: false
          username: Required
    - name: GBASE_PASSWORD
      valueFrom:
        credentialVarRef:
          compDef: {{ include "gbase.componentDefName" . }}
          name: gbase
          optional: false
          password: Required   
  updateStrategy: Parallel
  podManagementPolicy: Parallel
  roles:
    - name: "primary"
      serviceable: true
      writable: true
    - name: "standby"
      serviceable: true
      writable: false
  lifecycleActions:
    roleProbe:
      initialDelaySeconds: {{ .Values.roleProbe.initialDelaySeconds }}
      periodSeconds:  {{ .Values.roleProbe.periodSeconds }}
      timeoutSeconds: {{ .Values.roleProbe.timeoutSeconds }}
      builtinHandler: custom
      customHandler:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.gbase.repository }}:{{ .Values.image.gbase.tag }} 
        exec:
          command:
            - /bin/bash
            - -c
            - |
              remote_command="gs_om -t status -h $HOSTNAME"
              output=$(timeout 10s sshpass -p "$GBASE_PASSWORD" ssh -o StrictHostKeyChecking=no gbase@$KB_POD_FQDN "$remote_command")
              instance_role=$(echo "$output" | grep -A 20 "node_name\s*:\s*$POD_NAME" | grep "instance_role" | awk '{print $3}')
              if [[ "$instance_role" == "Primary" ]]; then
                echo -n "primary" 
              else
                echo -n "standby" 
              fi
    switchover:
      withCandidate:
        image: {{ .Values.image.registry | default "docker.io" }}/{{ .Values.image.gbase.repository }}:{{ .Values.image.gbase.tag }} 
        exec:
          command:
            - /bin/bash
            - -c
            - |
              switchover_command="gs_ctl switchover -D /data/database/install/data/dn"
              echo "switchover begin..."
              output=$(timeout 10s sshpass -p "$GBASE_PASSWORD" ssh -o StrictHostKeyChecking=no gbase@$KB_SWITCHOVER_CANDIDATE_FQDN "$switchover_command")
              echo $output
              role_probe_command="gs_om -t status -h $KB_SWITCHOVER_CANDIDATE_NAME"
              output=$(timeout 10s sshpass -p "$GBASE_PASSWORD" ssh -o StrictHostKeyChecking=no gbase@$KB_SWITCHOVER_CANDIDATE_FQDN "$role_probe_command")
              instance_role=$(echo "$output" | grep -A 20 "node_name\s*:\s*$POD_NAME" | grep "instance_role" | awk '{print $3}')
              if [[ "$instance_role" == "Primary" ]]; then
                echo "switchover successfully"
              else
                echo "switchover failed, please check!"
                exit 1
              fi
    memberJoin: 
      customHandler:
        exec:
          command:
            - /bin/bash
            - -c
            - |  
              sshpass -p "$GBASE_PASSWORD" ssh -o StrictHostKeyChecking=no root@${KB_CLUSTER_COMP_NAME}-0.${KB_CLUSTER_COMP_NAME}-headless.${KB_NAMESPACE}.svc "/scripts/memberJoin.sh $KB_NEW_MEMBER_POD_NAME $KB_NEW_MEMBER_POD_IP"    
    memberLeave: 
      customHandler:
        exec:
          command: 
            - /bin/bash
            - -c
            - |  
              IFS=',' read -r -a KB_POD_ARRAY <<< "$KB_POD_LIST"
              for POD_NAME in "${KB_POD_ARRAY[@]}"; do
                POD_FQDN="${POD_NAME}.${KB_CLUSTER_COMP_NAME}-headless.${KB_NAMESPACE}.svc"
                remote_command="gs_om -t status -h $POD_NAME"
                output=$(timeout 10s sshpass -p "$GBASE_PASSWORD" ssh -o StrictHostKeyChecking=no gbase@$POD_FQDN "$remote_command")
                instance_role=$(echo "$output" | grep -A 20 "node_name\s*:\s*$POD_NAME" | grep "instance_role" | awk '{print $3}')
                if [[ "$instance_role" == "Primary" ]]; then
                  if [[ "$POD_FQDN" == "$HOSTNAME" ]]; then
                    echo "Error: Primary node is the same as the current hostname ($HOSTNAME). Exiting."
                    exit 1
                  else
                    sshpass -p "$GBASE_PASSWORD" ssh -o StrictHostKeyChecking=no gbase@$POD_FQDN "/scripts/memberLeave.sh $KB_LEAVE_MEMBER_POD_IP"
                    exit 0
                  fi
                fi
              done
              echo "No primary node found. Exiting."
              exit 1
  runtime:
    containers:
      - name: gbase
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.gbase.pullPolicy }}
        command: ["/sbin/init"]
        lifecycle:
          postStart:
            exec:
              command: ["/scripts/node_setup.sh"]
        securityContext:
          privileged: true
          runAsUser: 0
        env:
          - name: gbase_service_port
            value: "{{ .Values.gbaseConfigs.service.port }}"
        ports:
          - name: dbport
            containerPort: {{ .Values.gbaseConfigs.service.port }}
          - name: sshport
            containerPort: 22
        volumeMounts:
          - mountPath: /config
            name: gbase-config
          - mountPath: /data
            name: data
          - name: scripts
            mountPath: /scripts
          - name: ssh-key
            mountPath: /ssh-key
            readOnly: true
          - name: cgroup
            mountPath: /sys/fs/cgroup
            readOnly: true
      - name: exporter
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.exporter.pullPolicy }}
        command: ["/scripts/exporter-start.sh"]
        ports:
          - name: http-metrics
            containerPort: {{ .Values.metrics.service.port }}
        env:
          - name: gbase_service_port
            value: "{{ .Values.gbaseConfigs.service.port }}"
        volumeMounts:
          - name: scripts
            mountPath: /scripts     
    volumes:
    - name: cgroup
      hostPath:
        path: /sys/fs/cgroup
        type: Directory